用来保存浏览历史。
一、概述
	先后访问了三个地址，那么history对象就包括三项，history.length属性等于3。

	方法：
		back()：移动到上一个访问页面，等同于浏览器的后退键。
		forward()：移动到下一个访问页面，等同于浏览器的前进键。
		go()：接受一个整数作为参数，移动到该整数指定的页面，比如go(1)相当于forward()，go(-1)相当于back()。

		移动的位置超出了访问历史的边界，以上三个方法并不报错，而是默默的失败。

		history.go(0);
			相当于刷新当前页面。

二、history.pushState()，history.replaceState() ->HTML5
	用来在浏览历史中添加和修改记录。所有主流浏览器都支持该方法（包括IE10）。

	1.history.pushState方法接受三个参数，依次为：
		state：一个与指定网址相关的状态对象，popstate事件触发时，该对象会传入回调函数。如果不需要这个对象，此处可以填null。
		title：新页面的标题，但是所有浏览器目前都忽略这个值，因此这里可以填null。
		url：新的网址，必须与当前页面处在同一个域。浏览器的地址栏将显示这个网址。

	注意，pushState方法不会触发页面刷新。

	2.history.replaceState
		方法的参数与pushState方法一模一样，区别是它修改浏览历史中当前页面的值。

三、history.state属性
	保存当前页面的state对象

四、popstate事件
	注意的是，仅仅调用pushState方法或replaceState方法 ，并不会触发该事件，只有用户点击浏览器倒退按钮和前进按钮，或者使用JavaScript调用back、forward、go方法时才会触发。
	另外，该事件只针对同一个文档，如果浏览历史的切换，导致加载不同的文档，该事件也不会触发。

五、URLSearchParams API
	用于处理URL之中的查询字符串，即问号之后的部分。

	有以下方法，用来操作某个参数：
		has()：返回一个布尔值，表示是否具有某个参数
		get（）：返回指定参数的第一个值
		getAll()：返回一个数组，成员是指定参数的所有值
		set()：设置指定参数
		delete()：删除指定参数
		append()：在查询字符串之中，追加一个键值对
		toString()：返回整个查询字符串

		var paramsString = "q=URLUtils.searchParams&topic=api"
		var searchParams = new URLSearchParams(paramsString);
			searchParams.has('topic') // true
			searchParams.get('topic') // "api"
			searchParams.getAll('topic') // ["api"]

	URLSearchParams还有三个方法，用来遍历所有参数：
		keys()：遍历所有参数名
		values()：遍历所有参数值
		entries()：遍历所有参数的键值对

		上面三个方法返回的都是Iterator对象。

	DOM的a元素节点的searchParams属性，就是一个URLSearchParams实例。

