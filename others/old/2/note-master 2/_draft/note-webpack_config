// 定义输出文件夹
var outputDir = './dist';
// 定义开发文件夹
var entryPath = './app/views';

-app(src)
	-app.js
	-cats.js
-bin(dist or build)

D:\workspace-cps\zixin2025\web\cms-zx\src\main\webapp>

//目录结构
	src/ # 开发目录
		static/ # 静态资源目录
			img/
			sass/
			js/
		page/ #html页面
			index.html
			page1.html
			pagen+++.html #狠多页面
	dist/ # 编译输出目录，即发布目录
		static/
			img/
			css/
			js/
		page/
			index.html
			page1.html
			pagen+++.html


		http://qiutc.me/post/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8webpack%E2%80%94webpack-howto.html
		http://qiutc.me/post/webpack-best-practice-%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5-%E9%83%A8%E7%BD%B2%E7%94%9F%E4%BA%A7.html

如何调用webpack？
	切换带包含webpack.config.js的目录然后在命令行运行：
		webpack 执行一次开发时的编译
		webpack -p 执行一次生成环境的编译（压缩）
		webpack --watch 在开发时持续监控增量编译（很快）
		webpack -d 让他生成SourceMaps


//引入包
		var webpack = require('webpack');
		var path = require('path');
		var fs = require('fs');
//判断是否是在当前生产环境
		定义函数判断是否是在当前生产环境，这个很重要，一位开发环境和生产环境配置上有一些区别
			var isProduction = function () {
			  return process.env.NODE_ENV === 'production';
			};
声明文件夹
	// 定义输出文件夹
		var outputDir = './dist';
	// 定义开发文件夹
		var entryPath = './app/views';	
		
		
定义插件
		CommonsChunkPlugin 插件可以打包所有文件的共用部分生产一个commons.js文件。
		ProvidePlugin 插件可以定义一个共用的入口，比如 下面加的 React ,他会在每个文件自动require了react，所以你在文件中不需要 require(‘react’)，也可以使用 React。
		如果是在生产环境下，则加入插件 UglifyJsPlugin ，执行代码压缩，并且去除 warnings
var plugins = [
  new webpack.optimize.CommonsChunkPlugin({
    name: 'commons',
    filename: 'js/commons.js',
  }),
  new webpack.ProvidePlugin({
    React: 'react',
    ReactDOM: 'react-dom',
    reqwest: 'reqwest',
  }),
];
if( isProduction() ) {
  plugins.push(
    new webpack.optimize.UglifyJsPlugin({
      test: /(\.jsx|\.js)$/,
      compress: {
        warnings: false
      },
    })
  );
}
//自动遍历多文件入口
		var entris = fs.readdirSync(entryPath).reduce(function (o, filename) {
		    !/\./.test(filename) &&
		    (o[filename] = './' + path.join(entryPath, filename, filename + '.jsx'));
		    return o;
		  }, {}
		);
		如果在这一步不需要多页面多入口 ?????????????????????????????????????????
				var HtmlWebpackPlugin = require('html-webpack-plugin');
				plugins.push(new HtmlWebpackPlugin({
				  title: 'index',
				  filename: outputDir+'/index.html',  #生成html的位置
				  inject: 'body',                     #插入script在body标签里
				}));
				entry 就可以自定义一个入口就够了


config的具体配置
		path是生成文件的存放目录，
		filename是文件名
		filename 的相对路径就是 path了，并且下面 静态文件生成的filename也是相对于这里的path的，比如 image 和 html。
		publicPath 的话是打包的时候生成的文件链接，比如 图片 资源，
				如果是在生产环境当然是用服务器地址，如果是开发环境就是用本地静态服务器的地址。

module loaders 打包加载的处理器

js/jsx
		{
		  test: /(\.jsx|\.js)$/,
		  loaders: ['babel?presets[]=es2015&presets[]=react'],
		  exclude: /node_modules/
		},
		对于js文件和jsx文件用了babel来处理，这里注意一下，最新版本的babel吧es2015和react的处理分开了，所有要这么写。
处理json文件

处理 图片 字体 资源文件

处理html文件
		在多页面的项目中需要，可以自动吧html文件导入到指定的生产文件夹下

resolve
		resolve: {
		  extensions: ['', '.js', 'jsx'],
		},
		是可以忽略的文件后缀名，比如可以直接require('Header');而不用加.jsx。
devtool
		devtool: isProduction()?null:'source-map',
		规定了在开发环境下才使用 source-map。


设置loader




var commonsPlugin = new webpack.optimize.CommonsChunkPlugin('common.js');

plugins: [commonsPlugin]