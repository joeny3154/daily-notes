移动设备API
	1.Permission API
	2.Viewport
	3.Geolocation API
		3.1 getCurrentPosition方法
		3.2 watchPosition方法和clearWatch方法
	4.Vibration API

	5.Luminosity API

	6.Orientation API

1.Permission API
	很多操作需要用户许可，比如脚本想要知道用户的位置，或者操作用户机器上的摄像头。
	用来查询某个接口的许可情况。

2.Viewport
	指的是网页的显示区域，也就是不借助滚动条的情况下，用户可以看到的部分网页大小，中文译为“视口”。
	正常情况下，viewport和浏览器的显示窗口是一样大小的。但是，在移动设备上，两者可能不是一样大小。

	<head>
	  <meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=no"/>
	</head>

	viewport 全部属性如下：
		width: viewport宽度
		height: viewport高度
		initial-scale: 初始缩放比例
		maximum-scale: 最大缩放比例
		minimum-scale: 最小缩放比例
		user-scalable: 是否允许用户缩放

3.Geolocation API
	用于获取用户的地理位置。
		检查浏览器是否支持这个接口：
			if(navigator.geolocation) { 
			   // 支持
			} else {
			   // 不支持
			}
	3.1 getCurrentPosition方法
		用来获取用户的地理位置

		必须考虑两种情况的回调函数：一种是同意授权，另一种是拒绝授权。如果用户拒绝授权，会抛出一个错误。
		navigator.geolocation.getCurrentPosition(geoSuccess,geoError);
		（1）同意授权
			调用geoSuccess。参数是一个event对象

		（2）拒绝授权
			参数也是一个event对象。event.code属性表示错误类型，有四个值：

		 (3)设置定位行为
	3.2 watchPosition方法和clearWatch方法
		watchPosition方法可以用来监听用户位置的持续改变，使用方法与getCurrentPosition方法一样。

		watchPosition方法返回的标识符，用于供clearWatch方法取消监听。
4.Vibration API
	用于在浏览器中发出命令，使得设备振动。
	navigator.vibrate(1000);参数就是振动持续的毫秒数。

	要停止振动，只有将0毫秒或者一个空数组传入vibrate方法。

	如果要让振动一直持续，可以使用setInterval不断调用vibrate。
5.Luminosity API
	用于屏幕亮度调节，当移动设备的亮度传感器感知外部亮度发生显著变化时，会触发devicelight事件。
	只有Firefox部署了这个API。

	CSS下一个版本的Media Query可以单独设置亮度，一旦浏览器支持，就可以用来取代Luminosity API。

6.Orientation API
	用于检测手机的摆放方向（竖放或横放）。
	检测浏览器是否支持该API。
		if (window.DeviceOrientationEvent) {
		  // 支持
		} else {
		  // 不支持
		}