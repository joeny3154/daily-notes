Web Storage：浏览器端数据储存机制
1.概述
2.操作方法
	2.1 存入/读取数据
	2.2 清除数据
	2.3 遍历操作
3.storage事件

1.概述
	这个API的作用是，使得网页可以在浏览器端储存数据。它分成两类：sessionStorage和localStorage。
	sessionStorage保存的数据用于浏览器的一次会话，当会话结束（通常是该窗口关闭），数据被清空；
	localStorage保存的数据长期存在，下一次访问该网站的时候，网页可以直接读取以前保存的数据。除了保存期限的长短不同，这两个对象的属性和方法完全一样。
2.操作方法
	2.1 存入/读取数据
		存入数据使用setItem方法。它接受两个参数，第一个是键名，第二个是保存的数据。
			sessionStorage.setItem("key","value");
			localStorage.setItem("key","value");
		读取数据使用getItem方法。它只有一个参数，就是键名。
			var valueSession = sessionStorage.getItem("key");
			var valueLocal = localStorage.getItem("key")
	2.2 清除数据
		removeItem方法用于清除某个键名对应的数据。
			sessionStorage.removeItem('key');
			localStorage.removeItem('key');
		clear方法用于清除所有保存的数据
			sessionStorage.clear();
			localStorage.clear(); 
	2.3 遍历操作
		利用length属性和key方法，可以遍历所有的键。
			for(var i = 0; i < localStorage.length; i++){
			    console.log(localStorage.key(i));
			}
		其中的key方法，根据位置（从0开始）获得键值。
			localStorage.key(1);
3.storage事件
	当储存的数据发生变化时，会触发storage事件。我们可以指定这个事件的回调函数。
		window.addEventListener("storage",onStorageChange);
	回调函数接受一个event对象作为参数。这个event对象的key属性，保存发生变化的键名。
		function onStorageChange(e) {
		     console.log(e.key);    
		}

		除了key属性，event对象的属性还有三个：
			oldValue：更新前的值。如果该键为新增加，则这个属性为null。
			newValue：更新后的值。如果该键被删除，则这个属性为null。
			url：原始触发storage事件的那个网页的网址。
	特别注意:
		该事件不在导致数据变化的当前页面触发。如果浏览器同时打开一个域名下面的多个页面，当其中的一个页面改变sessionStorage或localStorage的数据时，其他所有页面的storage事件会被触发，而原始页面并不触发storage事件。
		(实现多个窗口之间的通信):
		可以通过这种机制，实现多个窗口之间的通信。所有浏览器之中，只有IE浏览器除外，它会在所有页面触发storage事件。