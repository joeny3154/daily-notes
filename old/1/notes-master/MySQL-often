
MySQL 创建数据表
	runoob_tbl(
	   runoob_id INT NOT NULL AUTO_INCREMENT,
	   runoob_title VARCHAR(100) NOT NULL,
	   runoob_author VARCHAR(40) NOT NULL,
	   submission_date DATE,
	   PRIMARY KEY ( runoob_id )
	);


查询语句:
	显示所有字段：
	SHOW COLUMNS FROM users.

	选择部分列：
	SELECT id,username FROM users;	//id列在前
	SELECT username,id FROM users;	//id列在后

	选择所有列：
	SELECT * FROM user_info;

	取别名：
	SELECT mobile AS a , nickname AS b FROM user_info;

	分组：
		按字段名称分组
	SELECT extender FROM user_info GROUP BY extender;
		按字段位置分组
	SELECT extender FROM user_info GROUP BY extender;

	分组条件：
	SELECT sex,age FROM users GROUP BY 1 HAVING age > 35;

	结果排序：
		version按照version的降序分组
	SELECT version FROM user_info GROUP BY version ORDER BY version DESC;
		nickname按照version的降序分组
	SELECT nickname, version FROM user_info GROUP BY nickname ORDER BY version DESC;

	子查询：
		select goods_id,goods_price from tdb_goods where goods_price > any(select goods_price from tdb_goods where goods_cate='超级本');





	查询语句中你可以使用一个或者多个表，表之间使用逗号(,)分割，并使用WHERE语句来设定查询条件。
		SELECT runoob_id, runoob_title, runoob_author, submission_date FROM runoob_tbl;
	SELECT 命令可以读取一条或者多条记录。

	你可以使用星号（*）来代替其他字段，SELECT语句会返回表的所有字段数据
		SELECT * from runoob_tbl 
	你可以使用 WHERE 语句来包含任何条件。

	你可以通过OFFSET指定SELECT语句开始查询的数据偏移量。默认情况下偏移量为0。

	你可以使用 LIMIT 属性来设定返回的记录数。


	查询语句中你可以使用一个或者多个表，表之间使用逗号(,)分割，并使用WHERE语句来设定查询条件。
	你可以在WHERE子句中指定任何条件。
		SELECT * from runoob_tbl WHERE runoob_author='Sanjay';
	你可以使用AND或者OR指定一个或多个条件。

		使用 BINARY 关键字来设定WHERE子句的字符串比较是区分大小写的
		SELECT * from runoob_tbl WHERE BINARY runoob_author='sanjay';

	WHERE子句也可以运用于SQL的 DELETE 或者 UPDATE 命令。
	WHERE 子句类似于程序语言中的if条件，根据 MySQL 表中的字段值来读取指定的数据。



	UPDATE 查询
		更新runoob_tbl表中runoob_id 为 3 的 runoob_title 字段值
	'UPDATE runoob_tbl SET runoob_title="Learning JAVA" WHERE runoob_id=3'

	DELETE 语句
		DELETE FROM runoob_tbl WHERE runoob_id=3;



JOIN 按照功能大致分为如下三类：
	mysql> SELECT * FROM tcount_tbl;
		+-----------------+----------------+
		| runoob_author | runoob_count |
		+-----------------+----------------+
		| mahran          |             20 |
		| mahnaz          |           NULL |
		| Jen             |           NULL |
		| Gill            |             20 |
		| John Poul       |              1 |
		| Sanjay          |              1 |
		+-----------------+----------------+

	mysql> SELECT * from runoob_tbl;
		+-------------+----------------+-----------------+-----------------+
		| runoob_id | runoob_title | runoob_author | submission_date |
		+-------------+----------------+-----------------+-----------------+
		|           1 | Learn PHP      | John Poul       | 2007-05-24      |
		|           2 | Learn MySQL    | Abdul S         | 2007-05-24      |
		|           3 | JAVA Tutorial  | Sanjay          | 2007-05-06      |
		+-------------+----------------+-----------------+-----------------+
	
	INNER JOIN（内连接,或等值连接）：获取两个表中字段匹配关系的记录。
		mysql> SELECT a.runoob_id, a.runoob_author, b.runoob_count FROM runoob_tbl a, tcount_tbl b WHERE a.runoob_author = b.runoob_author;

		+-------------+-----------------+----------------+
		| runoob_id | runoob_author | runoob_count |
		+-------------+-----------------+----------------+
		|           1 | John Poul       |              1 |
		|           3 | Sanjay          |              1 |
		+-------------+-----------------+----------------+
	LEFT JOIN（左连接）：获取左表所有记录，即使右表没有对应匹配的记录。
		SELECT a.runoob_id, a.runoob_author, b.runoob_count FROM runoob_tbl a LEFT JOIN tcount_tbl b ON a.runoob_author = b.runoob_author;

		+-------------+-----------------+----------------+
		| runoob_id | runoob_author | runoob_count |
		+-------------+-----------------+----------------+
		|           1 | John Poul       |              1 |
		|           2 | Abdul S         |           NULL |
		|           3 | Sanjay          |              1 |
		+-------------+-----------------+----------------+
	
	RIGHT JOIN（右连接）： 与 LEFT JOIN 相反，用于获取右表所有记录，即使左表没有对应匹配的记录。
		SELECT b.runoob_id, b.runoob_author, a.runoob_count FROM tcount_tbl a RIGHT JOIN runoob_tbl b ON a.runoob_author = b.runoob_author;

		+-------------+-----------------+----------------+
		| 	runoob_id |   runoob_author |   runoob_count |
		+-------------+-----------------+----------------+
		|           1 | John Poul       |              1 |
		|           2 | Abdul S         |           NULL |
		|           3 | Sanjay          |              1 |
		+-------------+-----------------+----------------+






	CREATE TABLE IF NOT EXISTS tdb_goods(
	    goods_id    SMALLINT UNSIGNED PRIMARY KEY AUTO_INCREMENT,
	    			//					主键 		自增
	    	//		smallint unsigned primary key auto_increment 主键约束
	    goods_name  VARCHAR(150) NOT NULL,
	    			//变长字符串
	    goods_cate  VARCHAR(40)  NOT NULL,
	    brand_name  VARCHAR(40)  NOT NULL,
	    goods_price DECIMAL(15,3) UNSIGNED NOT NULL DEFAULT 0,
	    						//数字类型无符号化	非空		默认约束
	    is_show     BOOLEAN NOT NULL DEFAULT 1,
	    is_saleoff  BOOLEAN NOT NULL DEFAULT 0
  );
	

	 -- 写入记录

 	INSERT tdb_goods (goods_name,goods_cate,brand_name,goods_price,is_show,is_saleoff) VALUES('R510VC 15.6英寸笔记本','笔记本','华硕','3399',DEFAULT,DEFAULT);


 	列子查询中使用 IN、ANY、SOME 和 ALL 操作符
		由于列子查询返回的结果集是 N 行一列，因此不能直接使用 = > < >= <= <> 这些比较标量结果的操作符。在列子查询中可以使用 IN、ANY、SOME 和 ALL 操作符：
		IN：在指定项内，同 IN(项1,项2,…)。
		ANY：与比较操作符联合使用，表示与子查询返回的任何值比较为 TRUE ，则返回 TRUE 。
		SOME：ANY 的别名，较少使用。
		ALL：与比较操作符联合使用，表示与子查询返回的所有值比较都为 TRUE ，则返回 TRUE 。