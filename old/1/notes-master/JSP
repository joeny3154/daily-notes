
JSP常用标签
	JSTL:
		java中的一个定制标记库集
	为什么要使用JSTL？
		实现了JSP页面中的代码复用
			基于标签库原理，重复率较高的代码块支持复用，提高效率
		书写JSP页面时可读性更强
			长得像xml，方便前端查看和参与开发

JSTL的环境搭建
	由于JSTL标签和Servet及JSP页面有着比较严格的版本对应关系，版本对应
		不正确很容易抛出异常，所以这里我们采用：
			—Tomcat7.0+JSTL1.1.2组合环境
			
			Tomcat7.0配置到eclipse

			JSTL1.1.2下载：

			
第一个JSTL小程序
		JSTL的基本配置：

		输出<C:out>标签
			<%@taglib url="http://java.sun.com/jsp/jstl/core" prefix="c"%>

			<c:out value="这是我的第一个jstl标签"></c:out>
		
JSTL的好帮手-EL表达式
	JSTL标签四大分类及JSTL函数

	核心标签core：
		最常用，最重要，也是本节课的重点
	格式化标签：
	SQL标签：
	XML标签：

	JSTL函数：
		也是很常用的

		value：变量和常量
			借助EL表达式帮助获取value

		EL表达式：
			全名是 Experssion Language
				-经常与JSTL配合使用，使得JSP页面更加直观，写法更简单
				-普通写法：<%=session.getValue("name")
				-EL表达式写法：<c:out value="${sessionScope.name}"/>

			EL表达式的格式：
				-用美元符号"$"定界，内容包括在花括号"{}"中
					${表达式}
				
				"."与"[]"运算符
					通常情况是通用的${user.sex} ${user["sex"]}
					"[]"还可以用来进行集合元素中的定位${booklist[0].price}
					除2种情况外
						1.包含特殊字符
							${user["first-name"]}
						2.通过变量动态取值：${user[param]}
							param可以是name or sex or others
							"."的写法是${user.name} or ${user.sex} or ...起不到动态传值的效果

			EL变量
				JSP内置对象		对应		El名称
					Page				PageScope
					Request				RequestScope
					Session 			SessionScope
					Application			ApplicationScope

			查找变量顺序
				<c:out value="${username}"></c:out>
					Page->Request->Session->Application
				如果都没有找到，会输出为空的字符窜
			EL自动类型转换
				要取得文本框中的输入，我们需要做类型转换

					String str_count=request.getParameter("count");		???
					int count=Integer.parseInt(str_count);
					count=count+20;//否则是做的字符串拼接

				EL会进行自动类型转换，只需要这样写
					${param.count+20}

			EL隐式对象：
				略

			EL运算符
				算数运算符:${1+2}
				关系运算符:
				逻辑运算符:
				验证运算符:empty
					对于验证数据特别有用。可以将empty和表达式配合使用，通过判断结果值（true or false）
						来判断表达式是否为null。
							为空返回true
							不为空返回false
						<% String username="zhangsan";request.setAttribute("username",username); %>
						
						<C:out value="${empty username}"></C:out>

						<%String username=""; request.setAttribute("username",username);%>
						<%String username="null"; request.setAttribute("username",username);%>
							""(空字符串)与 "null" empty都是返回true

=================================================================================================			
		常用核心标签介绍：
			JSTL的核心标签库标签共13个，从功能上可以分为4类：
				-表达式控制标签：out set remove catch
				-流程控制标签：if choose when otherwise
				-循环标签：forEach forTokens
				-URL操作标签：import url redirect

===============================================================================================
	
	表达式控制标签详解-out
	===================

		out标签：
				out标签的用法
					-输出常量
						可在value属性中直接赋值
					-输出变量
						变量不存在时可以配合default属性输出默认值，还可以通过escapeXml控制转义字符的输出方式

						使用out标签输出常量
							<c:out value="this is our first JSTL demo"></c:out>

							<%session.setAttribute("name","Jessica");
		catch标签：
			包含容易出错的标签；


===============================================================================================
	
	流程控制标签
	===========

		1.if标签
			同程序中的if作用相同，用来实现分支条件控制
				test属性用于存放判断的条件，一般使用EL表达式来编写
				var指定名称用来存放判断的结果类型为true或false

				<c:if test="" var="" scope=""></c:if>

			demo:
				<form action="firstDemo.jsp" method="post">
					<input type="text" name="score" value="${param.score}"/>
					<input type="submit"/>
				</form>
				<c:if test="${parm.score>=90}" var="result" scope="application">//整个应用有效
					<c:out value="恭喜，你的成绩是优秀！"></c:out>
				</c:if>
				<c:out value="applicationScope.result"></c:out>

		2.choose,when,otherwise	
			通常这三个标签被放在一起配合使用
			-<c:choose>标签嵌套在<c:when>和<c:otherwise>标签外面作为他们的父标签使用
			-其中choose和when标签也可以一起组合使用

			综上所述通常有以下两个语法结构：
				用法一：3个标签同时使用
					<c:choose>
						<c:when test="判断条件">
							业务逻辑1
						</c:when>

						<c:otherwise>
							业务逻辑2
						</c:otherwise>
					<c:choose>
				用法二：
					<c:choose>
						<c:when test="判断条件">
							业务逻辑1
						</c:when>
						<c:when test="判断条件">
							业务逻辑2
						</c:when>
					<c:choose>


=================================================================================================
	循环控制标签
	============

		1.forEach标签

			根据循环条件遍历集合（Collection）中的元素
				var设定变量名用于存储从集合中取出元素（必须无默认值）
				items指定要遍历的集合（必须无默认值）
				begin,end用于指定遍历的起始位置和终止位置（有默认）
				step指定循环的步长（有默认）
				varStatus通过index，count,first,last几个状态值，描述begin和end子集中的元素的状态

			
			常用用法1-全部遍历
				<c:forEach var="存储当前遍历元素的变量" items="待遍历集合">
					-操作var变量表示的元素<br>
				</c:forEach>

				demo:
					<%
						List<String> fruits=new ArrayList<String>()
						fruits.add("apple");
						fruits.add("orange");
						fruits.add("pear");
						fruits.add("grape");
						fruits.add("banana");
						request.setAttribute("frutis",fruits);
					%>

					<c:forEach var="fruits" items="${fruits}">
						<c:out value="${fruits}"></c:out>
					</c:forEach>
			常用用法2-部分遍历
					<c:forEach var="fruits" items="${fruits}" begin="1" end="4">
						<c:out value="${fruits}"></c:out>
					</c:forEach>
			常用用法3-部分遍历并指定步长
					<c:forEach var="fruits" items="${fruits}" begin="1" end="4" step="2">
						<c:out value="${fruits}"></c:out>
					</c:forEach>
			常用用法4-部分遍历时输出元素的状态
					<c:forEach var="fruits" items="${fruits}" begin="1" end="4" step="2" varStatus="fru">
						<c:out value="${fruits}的四个属性值"></c:out>
						<c:out value="index属性：${fru.index}"></c:out>		//index从0开始
						<c:out value="count属性：${fru.index}"></c:out>		//count从1开始
						<c:out value="first属性：${fru.index}"></c:out>		//如果是第一个返回true，其他false
						<c:out value="last属性：${fru.index}"></c:out>		//如果是最后一个返回true，其他false
					</c:forEach>
		
		2.forTosken标签
			用于浏览字符串，并根据指定的字符串字符串截取
				items	指定被迭代的字符串
				delims	指定使用的分隔符
				var 	指定用来存放遍历的成员

				begin	指定遍历的开始位置（int型从取值0开始）
				end		指定遍历的结束位置（int型，默认集合中最后一个元素）
				step	遍历的步长
				avrStatus通过index,count,first,lase几个状态值，描述begin和end子集中的元素的状态
			<c:forTokens items="010-88096789-123" delims="-" var="num">		//指定了字符串，并按照指定分隔符分割
				<c:out value="${num}" ></c:out>
			</c:forTokens>
	
=================================================================================================
	URL操作标签详解
	=============

	1.import
		context引入的内容是webapps下的其他Web priject
			-1.修改tomcat的发布路径
			-2.修改%TOMACAT_HOME%/conf/context.xml的Context标签中的属性
				crossContext="true"

	2.redirect标签
		redirect标签的用法
			该标签用来实现请求的重定向，同时可以在url中加入指定的参数
				url指定重定向页面的地址，可以是一个string类型的绝对地址或者相对地址
				context用来导入其他的web应用中的页面

	3.url
		url标签的用法
			该标签用于动态生成一个String类型的URL，可以用<C：param>标签共同使用，也可以使用html的
			<a>标签实现超链接
				.value 			表示url路径值
				.var 			将url路径存储在变量中
				.scope 			var变量的范围
===============================================================================================
	常用JSTL函数介绍
	==============
		要在页面添加
			<%@ taglib prefix="fn" uri="http://java.sun.com/jsp/jstl/functions"%>

			contains
				${fn:contains("Hello World","hello")}
			containsIgnoreCase
				${fn:containsIgnoreCase("Hello World","hello")}


			endWith("字符串1"，"字符串2")
				用于判断字符串2是否在字符串1结尾
			startWith("字符串1"，"字符串2")
				用于判断字符串2是否在字符串1开头

				<book>冰与火之歌</book>
				<C:out value="${fn:escapeXml('<book>冰与火之歌</book>')}"></C:out>
					带转义的字符 &lt;boolk&gt;
				<C:out value="<book>冰与火之歌</book>"></C:out>
			indexOf：

			常用JSTL函数还有很多：
				fn:length()
				fn:replace()
				fn:split()
				fn:trim()
				fn:substring()
				fn:startsWith()
				fn:toLowarCase()
				fn:toUpperCase()

课程总结：
	如何搭建环境
	JSP核心标签的使用
	常用JSTL函数










var arrUserSkill = "<c:if test="${userInfo != null && userInfo.skills != null}">${userInfo.skills}</c:if>";



一个JSP页面可以被分为以下几部份：
	1.静态数据，如HTML
	2.JSP指令，如include指令
	3.JSP脚本元素和变量
	4.JSP动作
	5.用户自定义标签

静态数据
	静态数据在输入文件中的内容和输出给HTTP响应的内容完全一致。此时，该JSP输入文件会是一个没有内嵌JAVA或动作的HTML页面。

JSP指令
	JSP指令控制JSP编译器如何去生成servlet，以下是可用的指令：
	1.包含指令include :
		包含指令通知JSP编译器把另外一个文件完全包含入当前文件中。效果就好像被包含文件的内容直接被粘贴到当前文件中一样。
		被包含文件的扩展名一般都是"jspf"（即JSPFragment，JSP碎片）:
		<%@ include file="somefile.jsp" %>
	2.页面指令page –页面指令有以下几个选项：
		import
			使一个JAVA导入声明被插入到最终页面文件。
		contentType
			规定了生成内容的类型。当生成非HTML内容或者当前字符集character set并非默认字符集时使用。
		errorPage
			处理HTTP请求时，如果出现异常则显示该错误提示信息页面。
		isErrorPage
			如果设置为TRUE，则表示当前文件是一个错误提示页面。
		isThreadSafe
			表示最终生成的servlet是否安全线程（threadsafe）。
			<%@ page import="java.util.*" %> //example import导入样例<%@ page contentType="text/html" %> //example contentType页面类型样例
			<%@ page isErrorPage=false %> //example for non error page无错页面样例<%@ page isThreadSafe=true %> //example for a thread safe JSP安全线程JSP样例
			注意：在同一个JSP文件中只有"import"导入页面指令可以被多次使用。
	3.标签库指令taglib –标签库指令描述了要使用的JSP标签库。该指令需要指定一个前缀prefix（和C++的命名空间很类似）和标签库的描述URI:
		<%@ taglib prefix="myprefix" uri="taglib/mytag.tld" %>
JSP脚本
	标准脚本变量
	以下是永远可用的脚本变量：
	out – JSPWriter用来写入响应流的数据
	page – servlet自身
	pageContext –一个PageContext实例包括和整个页面相联系的数据，一个给定的HTML页面可以在多个JSP之间传递。
	request –HTTP request对象
	response –HTTP response对象
	session –用于保持客户端与服务器连接的对象
	脚本元素
	有三个基本的脚本元素，作用是使JAVA代码可以直接插入servlet.
	一种是声明标签，在JAVA SERVLET的类体中放入一个变量的定义。静态的数据成员也可以如此定义。
	<%! int serverInstanceVariable = 1; %>
	一种是脚本标签，在JAVA SERVLET的类的_jspService()方法中放入所包含的语句。
	<% int localStackBasedVariable = 1; out.println(localStackBasedVariable); %>
	一种是表达式标签，在JAVA SERVLET的类中放入待赋值的表达式，表达式注意不能以分号结尾。
	<%= "expanded inline data " + 1 %>
JSP动作
	JSP动作是一系列可以调用内建于网络服务器中的功能的XML标签。JSP提供了以下动作：
	jsp:include
		和子过程类似，JAVA SERVLET暂时接管对其它指定的JSP页的请求和响应。当处理完该JSP页后就马上把控制权交还当前JSP页。这样JSP代码就可以在多个JSP页中共享而不用复制。
	jsp:param
		可以在jsp:include, jsp:forward或jsp:params块之间使用。指定一个将加入请求的当前参数组中的参数。
	jsp:forward
		用于处理对另一个JSP或SERVLET的请求和响应。控制权永远不会交还给当前JSP页。
	jsp:plugin
		Netscape Navigator的老版本和Internet Explorer使用不同的标签以嵌入一个applet。这个动作产生为嵌入一个APPLET所需要的指定浏览器标签。
	jsp:fallback
		如果浏览器不支持APPLETS则会显示的内容。
	jsp:getProperty
		从指定的JavaBean中获取一个属性值。
	jsp:setProperty
		在指定的JavaBean中设置一个属性值。
	jsp:useBean
		创建或者复用一个JavaBean变量到JSP页。
技术方法
	为了快速方便地进行动态网站的开发，JSP在以下几个方面做了改进，使其成为快速建立跨平台的动态网站的首选方案。

1.将内容的生成和显示进行分离
	用JSP技术，Web页面开发人员可以使用HTML或者XML标识来设计和格式化最终页面，并使用JSP标识或者小脚本来生成页面上的动态内容（内容是根据请求变化的，例如请求账户信息或者特定的一瓶酒的价格等）。生成内容的逻辑被封装在标识和JavaBeans组件中，并且捆绑在脚本中，所有的脚本在服务器端运行。由于核心逻辑被封装在标识和JavaBeans中，所以Web管理人员和页面设计者，能够编辑和使用JSP页面，而不影响内容的生成。
	在服务器端，JSP引擎解释JSP标识和脚本，生成所请求的内容（例如，通过访问JavaBeans组件，使用JDBC技术访问数据库或者包含文件），并且将结果以HTML（或者XML）页面的形式发送回浏览器。这既有助于作者保护自己的代码，又能保证任何基于HTML的Web浏览器的完全可用性。
可重用组件
	绝大多数JSP页面依赖于可重用的、跨平台的组件（JavaBeans或者Enterprise JavaBeans组件）来执行应用程序所要求的复杂的处理。开发人员能够共享和交换执行普通操作的组件，或者使得这些组件为更多的使用者和客户团体所使用。基于组件的方法加速了总体开发过程，并且使得各种组织在他们现有的技能和优化结果的开发努力中得到平衡。
采用标识
	Web页面开发人员不会都是熟悉脚本语言的编程人员。JSP技术封装了许多功能，这些功能是在易用的、与JSP相关的XML标识中进行动态内容生成所需要的。标准的JSP标识能够访问和实例化JavaBeans组件，设置或者检索组件属性，下载Applet，以及执行用其他方法更难于编码和耗时的功能。
适应平台
	几乎所有平台都支持Java，JSP+JavaBeans几乎可以在所有平台下通行无阻。从一个平台移植到另外一个平台，JSP和JavaBeans甚至不用重新编译，因为Java字节码都是标准的与平台无关的。
数据库连接
	Java中连接数据库的技术是JDBC，Java程序通过JDBC驱动程序与数据库相连，执行查询、提取数据等操作。Sun公司还开发了JDBC－ODBC bridge，利用此技术Java程序可以访问带有ODBC驱动程序的数据库，大多数数据库系统都带有ODBC驱动程序，所以Java程序能访问诸如Oracle、Sybase、MS SQL Server和MS Access等数据库。
	此外，通过开发标识库，JSP技术可以进一步扩展。第三方开发人员和其他人员可以为常用功能创建自己的标识库。这使得Web页面开发人员能够使用熟悉的工具和如同标识一样的执行特定功能的构件来进行工作。
	JSP技术很容易整合到多种应用体系结构中，以利用现存的工具和技巧，并且能扩展到支持企业级的分布式应用中。作为采用Java技术家族的一部分，以及Java 2（企业版体系结构）的一个组成部分，JSP技术能够支持高度复杂的基于Web的应用。 

	由于JSP页面的内置脚本语言是基于Java的，而且所有的JSP页面都被编译成为Java Servlets，所以JSP页面具有Java技术的所有好处，包括健壮的存储管理和安全性。作为Java平台的一部分，JSP拥有Java编程语言“一次编写，各处运行”的特点。
语言特点
	优点
	（1）一次编写，到处运行。除了系统之外，代码不用做任何更改。
	（2）系统的多平台支持。基本上可以在所有平台上的任意环境中开发，在任意环境中进行系统部署，在任意环境中扩展。相比ASP的局限性JSP的优势是显而易见的。
	（3）强大的可伸缩性。从只有一个小的Jar文件就可以运行Servlet/JSP，到由多台服务器进行集群和负载均衡，到多台Application进行事务处理，消息处理，一台服务器到无数台服务器，Java显示了一个巨大的生命力。
	（4）多样化和功能强大的开发工具支持。这一点与ASP很像，Java已经有了许多非常优秀的开发工具，而且许多可以免费得到，并且其中许多已经可以顺利的运行于多种平台之下。
	JSP
	JSP
	(5)支持服务器端组件。web应用需要强大的服务器端组件来支持，开发人员需要利用其他工具设计实现复杂功能的组件供web页面调用，以增强系统性能。JSP可以使用成熟的JAVA BEANS 组件来实现复杂商务功能。
	缺点
	（1） 与ASP也一样，Java的一些优势正是它致命的问题所在。正是由于为了跨平台的功能，为了极度的伸缩能力，所以极大的增加了产品的复杂性。
	（2） Java的运行速度是用class常驻内存来完成的，所以它在一些情况下所使用的内存比起用户数量来说确实是“最低性能价格比”了。
	语言组成编辑
内置对象
	request
	request 对象是 javax.servlet.httpServletRequest类型的对象。 该对象代表了客户端的请求信息，主要用于接受通过HTTP协议传送到服务器的数据。（包括头信息、系统信息、请求方式以及请求参数等）。request对象的作用域为一次请求。
	response
		response 代表的是对客户端的响应，主要是将JSP容器处理过的对象传回到客户端。response对象也具有作用域，它只在JSP页面内有效。
	session
	1.什么是session：从一个客户打开浏览器并连接到服务器开始，到客户关闭浏览器离开这个服务器结束，被称为一个会话。当一个客户访问一个服务器时，可能会在这个服务器的几个页面之间反复连接，反复刷新一个页面，服务器应当通过某种办法知道这是同一个客户，这就需要session对象。
	2．session对象的ID：当一个客户首次访问服务器上的一个JSP页面时，JSP引擎产生一个session对象，同时分配一个String类型的ID号，JSP引擎同时将这个ID号发送到客户端，存放在Cookie中，这样session对象和客户之间就建立了一一对应的关系。当客户再访问连接该服务器的其他页面时，不再分配给客户新的session对象，直到客户关闭浏览器后，服务器端该客户的session对象才取消，并且和客户的会话对应关系消失。当客户重新打开浏览器再连接到该服务器时，服务器为该客户再创建一个新的session对象。
	3.session对象存在一定时间过期问题，所以存在session中的名值对会在一定时间后失去，可以通过更改session有效时间来避免这种情况。同时编程时尽量避免将大量有效信息存储在session中，request是一个不错的替代对象。
	application
	1．什么是application:
	服务器启动后就产生了这个application对象，当客户在所访问的网站的各个页面之间浏览时，这个application对象都是同一个，直到服务器关闭。但是与session不同的是，所有客户的application对象都是同一个，即所有客户共享这个内置的application对象。
	2．application对象常用方法:
	(1)public void setAttribute(String key,Object obj): 将参数Object指定的对象obj添加到application对象中，并为添加的对象指定一个索引关键字。
	(2)public Object getAttribute(String key): 获取application对象中含有关键字的对象。
	out
	out 对象用于在Web浏览器内输出信息，并且管理应用服务器上的输出缓冲区。在使用 out 对象输出数据时，可以对数据缓冲区进行操作，及时清除缓冲区中的残余数据，为其他的输出让出缓冲空间。待数据输出完毕后，要及时关闭输出流。
	page
	page 对象代表JSP本身，只有在JSP页面内才是合法的。 page隐含对象本质上包含当前 Servlet接口引用的变量，类似于Java编程中的 this 指针。
	config
	config 对象的主要作用是取得服务器的配置信息。通过 pageContext对象的 getServletConfig() 方法可以获取一个config对象。当一个Servlet 初始化时，容器把某些信息通过 config对象传递给这个 Servlet。 开发者可以在web.xml 文件中为应用程序环境中的Servlet程序和JSP页面提供初始化参数。
	exception
	java.lang.Throwable 的实例，该实例代表其他页面中的异常和错误。只有当页面是错误处理页面，即编译指令page 的isErrorPage 属性为true 时，该对象才可以使用。常用的方法有getMessage()和printStackTrace()等。
	pageContext
	pageContext 对象的作用是取得任何范围的参数，通过它可以获取 JSP页面的out、request、reponse、session、application 等对象。pageContext对象的创建和初始化都是由容器来完成的，在JSP页面中可以直接使用 pageContext对象。
	开发入门编辑
	JSP开发入门2
	安装好你的机器来使用JSP
	你将会需要Java 2软件开发工具(JSDK)，它原来的名称是Java开发工具(JDK)以及JavaServer网站开发工具(JSWDK)，Tomcat，或是其它支持JSP的网络服务器。Sun免费提供JSDK与JSWDK来供Windows，Solaris，以及Linux平台使用。
	如果你想要在你的网络服务器上使用JSP，但服务器本身并不支持JSP与Javaservlets，你可以试试看Allaire的Jrun，它的作用就像是针对Netscape企业版与FastTrack服务器、微软的网际网络信息服务器(IIS)与个人网络服务器(PWS)、Apache、以及其它服务器的网络服务器附加设备。你也可以使用Apache网络服务器的Java版本，最新的JSWDK里有提供。
	下载与安装你需要的组件
	发布的1.2.2-001，JSDK可下载的版本是以可安装的压缩形式。下载的文件大约是20MB，可提供完整的Java发展环境，让你能建立利用标准API为核心的Java解决之道。然而，你的网络服务器需要应用到JSP的唯一一件事是Java编译器。要让网络服务器知道编译器的位置，将环境变量JAVA.HOME设到JSDK的安装目录。如果你是在Windows上安装并且接受预设目录，将这行程序代码set JAVA.HOME=C:1.2.2加到你的autoexec.bat档案并且重新开机。
	在安装好JSDK之后，下载并且安装JSWDK或beta版的Tomcat，以Java为主的Apache网络服务器。安装在哪里并不重要，重要的是你可以找到它。一般而言，它会放在上层目录，这种方式可以让你取代JSWDK或 JSDK的网络服务器，不需要移动其它的网络服务器。在你安装好这个档案之后，你就可以准备发展JSP了。
	在你正确的安装JSWDK之后，执行startserver指令文件来激活网络服务器，预设通讯端口 为 8080。要看你在激活服务器之后是均C有正确的安装工具，你可以加载范例JSP档案中的任何一个(http://localhost:8080/examples/jsp/)。如果你能够成功的执行一个范例档案，你可以知道你已经正确的设定好软件了。如果你在激活服务器的控制台窗口看到错误讯息，那么你需要解决这个问题。最常发生的问题是没有设定(或者不正确设定)环境变量JAVA.HOME。要检视环境设定，在DOS模式下键入set。
	开始
	解释JSP语法之前，先建立一个显示日期与时间的简单网页并且将它储存成sample.jsp:
	1
	2
	3
	4
	5
	6
	7
	8
	9
	10
	<html>
	<head>
	<title>FirstPage</title>
	</head>
	<body>
	<H3>Todayis:
	<%=newjava.util.Date()%>
	</H3>
	</body>
	</html>.
	将这个档案与你所有的HTML与JSP网页放在你JSWDK安装目录下的网页目录里. 你可以在http://localhost:8080/sample.jsp下载此页.当你第一次参观这个网页时，网站服务器会将JSP翻译成Javaservlet程序代码，那你就会看到的日期与时间.。
	你已经下载，安装，并且架构好发展环境，你已经准备好要了解JSP语法与建立你自己的JSP为主的解决之道。
	JSP开发入门3
	JSP语法的基本原理
	安装之后，接下来我们要讨论JSP的语法.如果要偷懒，你可以下载语法卡而如果你不熟悉 Java的程序设计，你可能会想要参考Sun的使用手册；然而，网站建立者不应该做太多的Java发展。除了几个函数调用之外，出现在你JSP网页上的Java程序代码应该将它减到最少;
	记住这点之后，让我们先来看看JSP的编译器指引与指令组件，之后我们将解释JavaBeans与内部对象. JSP编译器指引与指令组件有五种型态.JSP 1.0之后，大部分的JSP是包含在以<% 作为开始%>作为结束的单一卷标里.新的 JSP 1.1规格已经发表了，它同时也与XML兼容.
	JSP的编译器指引与指令组件
	编译器指示　<%@ 编译器指示 %>
	声明　<%! 声明 %>
	表达式 <%= 表达式 %>
	程序代码段/小型指令　<% 程序代码片段 %>
	注释　<%-- 注释 --%>
	编译器指示
	JSP的编译器指示是针对JSP引擎。它们并不会直接产生任何看得见的输出；相反的，它们是在告诉引擎如何处理其它的JSP网页。它们永远包含在 <%@ ?%>卷标里。两个主要的指引是 page与include。我们不会讨论taglib编译器指引但它可以在JSP1.1里用来建立自订卷标。
	你几乎可以在你所有的JSP网页最上面找到page编译器指示。虽然这不是必须的，但它可以让你指定到哪里可以找到支持的Java类别这类的事：
	<%@ page import="java.util.Date" %>，
	当发生Java问题的事件时应该将讯息传送到哪里：
	<%@ page errorPage="errorPage.jsp" %>，
	以及你是?需要为使用者管理通话期的信息，可能存取多个网页(稍后在JavaBeans里会有更多通话期的讨论):
	<%@ page session="true" %>。
	include编译器指示让你将你的内容分成几个可管理的组件，就像那些有表头或脚注的网页。所包含的网页可以是固定格式的HTML网页或者是JSP内容的网页:
	<%@ include file="filename.jsp" %>。
	宣告
	JSP声明让你定义网页层的变量，来储存信息或定义支持的函式，让JSP网页的其余部分能够使用。如果你发现自己有太多的程序代码，你最好将它们放在不同的Java类别里。你可以在 <%! ?%>卷标里找到声明。记住要在变量声明的后面加上分号，就跟任何有效的Java叙述的形式一样: <%! int i=0; %>。
	表达式
	JSP里有表达式，评估表达式的结果可以转换成字符串并且直接使用在输出网页上。JSP运算是属于 <%= ?%> 卷标里，并不包含分号，加引号字符串的无用部分。
	<%= i %>
	<%= "Hello" %> 。
	程序代码段/小型指令文件
	JSP程序代码片段或小型指令文件是包含在<% ?%> 卷标里。当网络服务器接受这段请求时，这段Java程序代码会执行。小型指令文件可以是原始的HTML或XML，其内部的程序代码片段可以让你建立有条件的执行程序代码，或者只是一些使用另一块程序代码的东西。举例来说，下列的程序代码结合了表达式与小型指令文件，在H1，H2，H3，以及H4卷标里显示字符串"Hello"。小型指令文件不限于一行的原始程序代码 :
	<% for (int i=1; i<=4; i++) { %>
	<H<%=i%>>Hello</H<%=i%>>
	<% } %>。
	注释
	最后一个主要JSP组件是嵌入式注释。虽然你可以在你的档案里包含HTML注释，如果使用者检视网页的原始码，他们也会看到这些注释。如果你不要让使用者看到你的批注，你可以将它放在<%-- ?--%>卷标里:
	<%-- 针对服务器端的注释 --%>。
	JSP开发入门4
	JSP与JavaBean
	虽然你可以在小型指令文件里放入一大块的程序代码，但是大多数的Java程序代码是属于可以重复使用的组件，称为JavaB     ean。JavaBean就跟ActiveX控件一样:它们提供已知的功能，并且是为了可随时重复使用的目的而设计的。
	JavaBean的价值在于它可以经由一组特性来使用，而这些特性则提供对JavaBean设定的存取。以人来作范例，此人就是JavaBean，而他的姓名，社会福利安全号码，以及住址可以是特性。对于JSP网站，基本上你是将'JavaBean'动态的连接到你的网站。
	假设JavaBean是在建立网站之前建好的，你要做的第一件事是告诉JSP网页它所需要使用JavaBean.这工作可以用<jsp:useBean>卷标来完成：<jsp:useBean id="localName" class="com.jguru.Person" scope="application" />.
	<jsp:useBean>卷标需要你以id 属性来辨识JavaBean.在这里，你提供一个名称让JSP网页来辨识JavaBean，除了id 属性之外，你也必须告诉网页要到哪里去找这个JavaBean，或者是它的Java类别名称。类别属性提供如何在各式方法之中找到它，最后一个需要的组件是scope 属性.有了范围属性的帮助，你可以告诉JavaBean，要它为单一网页(预设)[scope="page"]；为一个被请求的网页[scope="request"]；为通话期[scope="session"]；或为整个应用程序[scope="application"]来维护它自己的信息.对于通话期范围，你可以很容易的维护JSP网页里的项目，例如购物车。
	一旦你宣告了JavaBean之后，你就可以存取它的特性来订定它。要取得一特性的值，使用<jsp:getProperty>卷标。有了<jsp:getProperty>卷标，你可以指定要使用的JavaBean名称(从useBean的id字段)，以及你要取得值的特性。接着，真正的值就会放在输出里：<jsp:getProperty id="localName" property="name" />.
	要更改JavaBean的特性，你需要使用<jsp:setProperty>卷标.对这个卷标，你也需要辨认JavaBean以及要修正的特性，除此之外，你还需要提供新值.如果命名正确，这些可以直接经由规定的格式取得：<jsp:setProperty id="localName" property="*" />;
	要从一参数取得，你必须直接命名此特性以及参数: <jsp:setProperty id="localName" property="address" param="parameterName" />;
	或是直接以名称与值来设定: <jsp:setProperty id="localName" property="serialNumber" value="string" /> or " value= <%= expression %> />.
	有关JavaBean的最后一点:要让网络服务器可以找到JavaBean，你需要将它们的类别档案放在特别位置。对JSWDK而言，最简单的地方是在安装目录里的类别目录，例如 jswdk-1.0.1classes.
	JSP开发入门5
	JSP的内部对象
	最后一个与JSP语法有关的组件叫做内部对象.在JSP小型指令文件内，你可以存取这些内部对象来与执行JSP网页的servlet环境相互作用。许多对内部对象的存取应该要简化。然而，这些是范例，它们的存取都是可接受的，要完整的利用内部对象设定则需要对最新的Java Servlet API有所了解。
	下表列出你可以使用的内部对象。
	内部对象说明
	request客户端请求，此请求会包含来自GET/POST请求的参数
	response　网页传回客户端的响应
	pageContext网页的属性是在这里管理
	session 与请求有关的会话
	applicationservlet正在执行的内容
	out 用来传送响应的输出流
	config　代码片段配置对象
	page　JSP网页本身
	exception　针对错误网页，未捕捉的例外
	那么，这些是做什么的，而你应该如何使用它们呢?基本上，在你的小型指令文件里，你可以使用它们来存取执行JSP程序代码的servlet。为了避免谈论到太多Servlet API 的细节，让我们来检视一些你可以利用它们来做的事：
	不必使用表达式，你可以直接存取内部out对象来打印一些东西到response:
	<% out.println("Hello"); %>.
	不必直接传送参数到JavaBean，你可以藉由请求对象来取得参数的值:
	<% String name=request.getParameter("name"); out.println(name); %>。
	当你以JSP写了许多的应用程序之后，如果你建立了JavaBeans或者发现你自己将太多的Java原始码放入你的JSP档案，你需要建立支持的Java类别，这样可以鼓励重复使用并且降低JSP网页转换时所需要的时间。当你需要建立Java类别时，你必须:
	将JDSWK的安装目录in目录加到你的PATH。在你的autoexec.bat档案的PATH行的最后，加入C:1.2.2in; 。
	以下面的指令将JAR档案复制到jrelibext目录：
	copy c:jswdk-1.0.1libservlet.jar c:jdk1.2.2jrelibext.
	语言对比编辑
	与servlets的区别
	从架构上说，JSP可以被看作是从Servlets高级提炼而作为JAVA Servlet2.1 API的扩展而应用。Servlets和JSP最早都是由Sun Microsystems(升阳公司)开发的。从JSP1.2版本以来，JSP处于Java Community Process(有人译为：JAVA社区组织)开发模式下。JSR-53规定了JSP 1.2和Servlet 2.4的规范，JSR-152规定了JSP 2.0的规范。2006年5月，JSP 2.1的规范作为Java EE5的一部份，在JSR-245中发布。
	与ASP的比较
	JSP(Java Server Page)与ASP(Active Server Page)两者都是常用的动态网页技术，也都是可以嵌入HTML中的程序，但两者是有着本质的不同，主要从以下几个方面对其进行比较：
	1.Web服务器的支持：大多数通用的 Web服务器如：Apache、Netscape和Microsoft IIS都支持JSP页面，只有微软本身的Microsoft IIS和Personal Web Server可以支持ASP。
	2.平台的支持：JSP具有平台独立性，只要是一般的Java程序可以运行的平台，都支持JSP程序。Windows平台可以很好的支持ASP,但ASP对于基于Win32逐渐模型的依赖，使得它难于移植到其它平台上。
	3.组件模型：JSP是建立在可重用的、跨平台的组件（如：JavaBeans、Enterprises JavaBeans和用户定制的标签库等组件）之上的，而ASP使用的是基于Win32的COM组件模型。
	4.脚本语言：JSP可以使用Java编程语言或JavaScript作为脚本语言，而ASP使用VBScript或Jscript作为脚本语言。
	5.安全性：JSP使用Java安全模型，而ASP使用Windows NT的安全结构。
	6.与Access数据库的连接：JSP使用JDBC建立与Access数据库的连接，而ASP对Access数据库使用Data Active Objects。
	7.用户定制的标签：JSP可以使用用户定制标签库进行扩充，而ASP中没有用户定制标签库，ASP是不能扩充的。
	常见问题编辑
	1、如何显示目录列表：
	我们在本机测试程序时，一般都习惯在浏览器中就能遍历到某个目录下都有哪些文件，这就需要web服务器支持目录列表：
	打开文件conf/web.xml，找到以下代码：
	1
	2
	<param-name>listings</param-name>
	<param-value>false</param-value>
	将其中的false改成true
	2、配置error-page：（指定处理错误的页面）
	打开文件D:\demo\WEB-INF\web.xml：
	在<web-app>…</web-app>中间加入：
	1
	2
	3
	4
	<error-page>
	<error-code>404</error-code>
	<location>/NotFound.jsp</location>
	</error-page>
	（错误代码为404的错误导向到NotFound.jsp）
	1
	2
	3
	4
	<error-page>
	<error-code>500</error-code>
	<location>/error.jsp</location>
	</error-page>
	（当系统发生500错误即服务器内部错误时，跳转到错误处理页面error.jsp）
	1
	2
	3
	4
	<error-page>
	<exception-type>java.lang.NullException</exception-type>
	<location>/error.jsp</location>
	</error-page>
	（当系统发生java.lang.NullException（即空指针异常）时，跳转到错误处理页面error.jsp）
	提醒：
	以上页面都需要做大一点（>=2kB），否则不起作用。
	原因：tomcat把这样的页面字节限制在不少于多少字节。
	3、jsp页面出现乱码如何解决？
	在页头加上：
	1
	2
	3
	<%@pagecontentType=“text/
	html
	;charset=gb2312″%>
	4、jsp中两种包含页面的方式？
	第一种：动作标签；例如：
	1
	<jsp:includepage="/index.html"/>
	第二种：指令标签；例如：
	1
	<%@includefile="relativeURL"%>
	JSP标准标签库编辑
	根据JSTL标签所提供的功能，可以将其分为5个类别。
	核心标签
	格式化标签
	SQL 标签
	XML 标签
	JSTL 函数
	JSTL 库安装
	Apache Tomcat安装JSTL 库步骤如下：
	从Apache的标准标签库中下载的二进包(jakarta-taglibs-standard-current.zip)。下载地址：http://archive.apache.org/dist/jakarta/taglibs/standard/binaries/
	下载jakarta-taglibs-standard-1.1.1.zip 包并解压，将jakarta-taglibs-standard-1.1.1/lib/下的两个jar文件：standard.jar和jstl.jar文件拷贝到/WEB-INF/lib/下。
	使用任何库，你必须在每个JSP文件中的头部包含<taglib>标签。
	核心标签
	核心标签是最常用的JSTL标签。引用核心标签库的语法如下：
	<%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
	标签
	描述
	<c:out >
	用于在JSP中显示数据，就像<%= ... >
	<c:set >
	用于保存数据
	<c:remove >
	用于删除数据
	<c:catch>
	用来处理产生错误的异常状况，并且将错误信息储存起来
	<c:if>
	与我们在一般程序中用的if一样
	<c:choose>
	本身只当做<c:when>和<c:otherwise>的父标签
	<c:when>
	<c:choose>的子标签，用来判断条件是否成立
	<c:otherwise >
	<c:choose>的子标签，接在<c:when>标签后，当<c:when>标签判断为false时被执行
	<c:import>
	检索一个绝对或相对 URL，然后将其内容暴露给页面
	<c:forEach >
	基础迭代标签，接受多种集合类型
	<c:forTokens>
	根据指定的分隔符来分隔内容并迭代输出
	<c:param>
	用来给包含或重定向的页面传递参数
	<c:redirect >
	重定向至一个新的URL.
	<c:url>
	使用可选的查询参数来创造一个URL
	格式化标签
	JSTL格式化标签用来格式化并输出文本、日期、时间、数字。引用格式化标签库的语法如下：
	<%@ taglib prefix="fmt" uri="http://java.sun.com/jsp/jstl/fmt" %>
	标签
	描述
	<fmt:formatNumber>
	使用指定的格式或精度格式化数字
	<fmt:parseNumber>
	解析一个代表着数字，货币或百分比的字符串
	<fmt:formatDate>
	使用指定的风格或模式格式化日期和时间
	<fmt:parseDate>
	解析一个代表着日期或时间的字符串
	<fmt:bundle>
	绑定资源
	<fmt:setLocale>
	指定地区
	<fmt:setBundle>
	绑定资源
	<fmt:timeZone>
	指定时区
	<fmt:setTimeZone>
	指定时区
	<fmt:message>
	显示资源配置文件信息
	<fmt:requestEncoding>
	设置request的字符编码
	SQL标签
	JSTL SQL标签库提供了与关系型数据库（Oracle，MySQL，SQL Server等等）进行交互的标签。引用SQL标签库的语法如下：
	<%@ taglib prefix="sql" uri="http://java.sun.com/jsp/jstl/sql" %>
	标签
	描述
	<sql:setDataSource>
	指定数据源
	<sql:query>
	运行SQL查询语句
	<sql:update>
	运行SQL更新语句
	<sql:param>
	将SQL语句中的参数设为指定值
	<sql:dateParam>
	将SQL语句中的日期参数设为指定的java.util.Date 对象值
	<sql:transaction >
	在共享数据库连接中提供嵌套的数据库行为元素，将所有语句以一个事务的形式来运行
	XML 标签
	JSTL XML标签库提供了创建和操作XML文档的标签。引用XML标签库的语法如下：
	<%@ taglib prefix="x" uri="http://java.sun.com/jsp/jstl/xml" %>
	在使用xml标签前，你必须将XML 和 XPath 的相关包拷贝至你的<Tomcat 安装目录>\lib下:
	XercesImpl.jar:
	xalan.jar:
	标签
	描述
	<x:out>
	与<%= ... >,类似，不过只用于XPath表达式
	<x:parse>
	解析 XML 数据
	<x:set >
	设置XPath表达式
	<x:if >
	判断XPath表达式，若为真，则执行本体中的内容，否则跳过本体
	<x:forEach>
	迭代XML文档中的节点
	<x:choose>
	<x:when>和<x:otherwise>的父标签
	<x:when >
	<x:choose>的子标签，用来进行条件判断
	<x:otherwise >
	<x:choose>的子标签，当<x:when>判断为false时被执行
	<x:transform >
	将XSL转换应用在XML文档中
	<x:param >
	与<x:transform>共同使用，用于设置XSL样式表
	JSTL函数
	JSTL包含一系列标准函数，大部分是通用的字符串处理函数。引用JSTL函数库的语法如下：
	<%@ taglib prefix="fn" uri="http://java.sun.com/jsp/jstl/functions" %>
	函数
	描述
	fn:contains()
	测试输入的字符串是否包含指定的子串
	fn:containsIgnoreCase()
	测试输入的字符串是否包含指定的子串，大小写不敏感
	fn:endsWith()
	测试输入的字符串是否以指定的后缀结尾
	fn:escapeXml()
	跳过可以作为XML标记的字符
	fn:indexOf()
	返回指定字符串在输入字符串中出现的位置
	fn:join()
	将数组中的元素合成一个字符串然后输出
	fn:length()
	返回字符串长度
	fn:replace()
	将输入字符串中指定的位置替换为指定的字符串然后返回
	fn:split()
	将字符串用指定的分隔符分隔然后组成一个子字符串数组并返回
	fn:startsWith()
	测试输入字符串是否以指定的前缀开始
	fn:substring()
	返回字符串的子集
	fn:substringAfter()
	返回字符串在指定子串之后的子集
	fn:substringBefore()
	返回字符串在指定子串之前的子集
	fn:toLowerCase()
	将字符串中的字符转为小写
	fn:toUpperCase()
	将字符串中的字符转为大写
	fn:trim()
	移除首位的空白符


<a title="${content.createTime}" href="/taskdetail.html?taskId=${taskApply.task.taskId }"><cms:textSubstr value="${taskApply.task.title }" length="40"/></a>

























