http://www.phperz.com/article/16/0120/184609.html

	jsp也就是一个模板，用来解析呈现数据用的，其它后台模板引擎还有velocity和freemarker等等
一、mustache的用法:
	script标签引入它的js文件

	1.定义模板字符串
		定义模板有2种方式:
			1.1 [...].join('')的方式在js代码中定义

			1.2 直接把模板内容用script定义在html中

			建议：
				模板要用于多个页面，推荐把模板定义在js代码；
				模板只用于当前页面，推荐直接定义到script标签中。

	2.预编译模板
		Mustache.parse(tpl);

	3.渲染模板
		var htmlAfterRendered = Mustache.render(tpl1, obj);
		obj:数据源对象

二、mustache的思想
	1.标签：mustache的标签，用{{}}替代了<>，以免跟html标签的<>混淆。
		{{prop}}
		{{{prop}}}
		{{#prop}}{{/prop}}
		{{^prop}}{{/prop}}

	2.logic-less：轻逻辑
		因为在定义模板的时候不会用到if-else，不会有循环式的编码，一切都用标签来解决，它的标签非常简单，但是能应付所有场景

三、标签
	1. {{prop}} 数据源对象上prop属性对应的值，转换成字符串进行输出
		1.1 null或undefined --> 则渲染成空串
		1.2 函数 --> 返回值作为渲染结果 ;返回值为null或者undefined -->空串，否则把返回值转成字符串作为渲染结果；如直接把函数代码渲染出来
		1.3 其它场景 --> 转成字符串

		默认情况下，mustache在渲染prop时，都是对prop的原始值进行url编码或者html编码之后再输出的，所以有一个用例的渲染结果，把英文的单引号，转成了html实体符
			console.log(Mustache.render(tpl1, {
			     prop: function () {
			         return 'it\'s a fun'
			     }
			}));
			 -{{prop}}- --> //-it&#39;s a fun-!
	2. {{{prop}}} ：阻止这种编码行为
				-{{{prop}}}- --> //-it's a fun-!
	3. {{#prop}}{{/prop}}标签
		可以同时完成if-else和for-each以及动态渲染的模板功能

		3.1 if-else渲染
			-{{#prop}}content{{/prop}}-
			prop属性在数据源对象上存在，并且不为false值(null,undefined,NaN,0,false,空字符串)
			并且不为空数组的情况下，标签之间的内容才会被渲染，否则都不会被渲染

		3.2 for-each渲染
			当prop属性所引用的是一个非空数组时，这对标签之间的内容将会根据数组大小进行迭代，并且当数组元素为对象时，还会把该对象作为每一次迭代的上下文，以便迭代时的标签可以直接引用数组元素上的属性

		3.3  动态渲染
			当prop属性所引用的是一个函数，并且这个函数的返回值还是一个函数的话，mustache会再次调用这个返回的函数，并给它传递2个参数：text表示原来的模板内容，render表示mustache内部的执行渲染的对象，以便在这个函数内部可以通过这render对象，结合原来的模板内容，自定义渲染的逻辑，并把函数的返回值作为渲染结果（这个返回值渲染的逻辑跟{{prop}}标签完全一样)

	4. {{^prop}}{{/prop}}标签
		这对标签，与{{#prop}}{{/prop}}的if-else渲染执行相反逻辑，即只有在prop属性不存在，或者引用的是一个falsy值，或者是一个空数组的时候才会显示标签之间的内容，否则不会显示

	5.