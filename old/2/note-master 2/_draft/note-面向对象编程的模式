//面向对象编程的模式

一.构造函数的继承
	第一步是在子类的构造函数中，调用父类的构造函数。
		function Sub)(value){
			Super.call(this);
			this.prop=value;
		}
	第二步，是让子类的原型指向父类的原型，这样子类就可以继承父类原型。
		Sub.prototype = Object.create(Super.prototype);
			//不是直接等于Super.prototype。否则后面两行对Sub.prototype的操作，会连父类的原型Super.prototype一起修改掉。
		Sub.prototype.constructor = Sub;
		Sub.prototype.method = '...';

	单个方法的继承：
		classB.prototype.print=function(){
			classA.prototype.print.call(this)
		}

二.多重继承
	function M1() {
	  this.hello = 'hello';
	}

	function M2() {
	  this.world = 'world';
	}

	function S() {
	  M1.call(this);
	  M2.call(this);
	}
	S.prototype = M1.prototype;

	var s = new S();
	s.hello // 'hello'
	s.world // 'world'

三、模块
	模块是实现特定功能的一组属性和方法的封装。
	1.基本的实现方法
		1.1函数模块
		1.2模块写成一个对象，所有的模块成员都放到这个对象里面。

	2.封装私有变量：构造函数的写法
		违反了构造函数与实例对象相分离的原则。并且，非常耗费内存。

		将私有变量放入实例对象中，好处是看上去更自然，但是它的私有变量可以从外部读写，不是很安全。
			function StringBuilder() {
			  this._buffer = [];
			}

			StringBuilder.prototype = {
			  constructor: StringBuilder,
			  add: function (str) {
			    this._buffer.push(str);
			  },
			  toString: function () {
			    return this._buffer.join('');
			  }
			};
	3.封装私有变量：立即执行函数的写法
		将相关的属性和方法封装在一个函数作用域里面，可以达到不暴露私有成员的目的。
		var module1 = (function () {
		　var _count = 0;
		　var m1 = function () {
		　  //...
		　};
		　var m2 = function () {
		　　//...
		　};
		　return {
		　　m1 : m1,
		　　m2 : m2
		　};
		})();
		使用上面的写法，外部代码无法读取内部的_count变量。

			console.info(module1._count); //undefined
	4.模块的放大模式
		var module1 = (function (mod){
		　mod.m3 = function () {
		　　//...
		　};
		　return mod;
		})(module1);
		如果采用上面的写法，第一个执行的部分有可能加载一个不存在空对象，这时就要采用”宽放大模式”
		
		宽放大模式：
			var module1 = ( function (mod){
			　//...
			　return mod;
			})(window.module1 || {});
	5.输入全局变量
		(function($, window, document) {

		  function go(num) {
		  }

		  function handleEvents() {
		  }

		  function initialize() {
		  }

		  function dieCarouselDie() {
		  }

		  //attach to the global scope
		  window.finalCarousel = {
		    init : initialize,
		    destroy : dieCouraselDie
		  }

		})( jQuery, window, document );

