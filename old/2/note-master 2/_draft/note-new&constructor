面向对象编程

// 面向对象编程语言（比如C++和Java），存在“类”（class）这个概念。所谓“类”就是对象的模板，对象就是“类”的实例。
// JavaScript语言的对象体系，不是基于“类”的，而是基于构造函数（constructor）和原型链（prototype）。

二.生成对象的时候，必需用new命令,
	// new命令本身就可以执行构造函数，所以后面的构造函数可以带括号，也可以不带括号。
	var v = new Vehicle();
	var v = new Vehicle;

	// 忘了使用new命令，构造函数就变成了普通函数，并不会生成实例对象

	解决办法是，在构造函数内部使用严格模式，即第一行加上use strict。
		function Fubar(foo, bar){
		  'use strict';
		  this._foo = foo;
		  this._bar = bar;
		}

		Fubar()
		// TypeError: Cannot set property '_foo' of undefined
	另一个解决办法，是在构造函数内部判断是否使用new命令:
	function Fubar(foo,bar){
		if(!(this instanceof Fubar)){
			return new Fubar(foo,bar);
		}
		this.foo=foo;
		this.bar=bar;
	}
	Fubar(1,2).foo;//1
	(new Fubar(1,2)).foo;

*new命令就会忽略return语句,返回“构造”后的this对象。

	但是，如果return语句返回的是一个跟this无关的新对象，new命令会返回这个新对象，而不是this对象

	另一方面，如果对普通函数（内部没有this关键字的函数）使用new命令，则会返回一个空对象。

new命令的原理:
	1.创建一个空对象，作为将要返回的对象实例
	2.将这个空对象的原型，指向构造函数的prototype属性
	3.将这个空对象赋值给函数内部的this关键字
	4.开始执行构造函数内部的代码

	function _new(/* 构造函数 */ constructor, /* 构造函数参数 */ param1) {
	  // 将 arguments 对象转为数组
	  var args = [].slice.call(arguments);
	  // 取出构造函数
	  var constructor = args.shift();
	  // 创建一个空对象，继承构造函数的 prototype 属性
	  var context = Object.create(constructor.prototype);
	  			//Object.create(proto, [ propertiesObject ])
	  				//proto->一个对象，作为新创建对象的原型。
	  				//propertiesObject->可选。该参数对象是一组属性与值，该对象的属性名称将是新创建的对象的属性名称，值是属性描述符（这些属性描述符的结构与Object.defineProperties()的第二个参数一样）。注意：该参数对象不能是 undefined，另外只有该对象中自身拥有的可枚举的属性才有效，也就是说该对象的原型链上属性是无效的。
	  // 执行构造函数
	  var result = constructor.apply(context, args);
	  // 如果返回结果是对象，就直接返回，则返回 context 对象
	  return (typeof result === 'object' && result != null) ? result : context;
	}

	// 实例
	var actor = _new(Person, '张三', 28);