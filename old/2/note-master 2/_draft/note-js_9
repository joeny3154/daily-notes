
9.1 JavaScript的异步执行
	http://javascript.ruanyifeng.com/advanced/promise.html
	1.1 回调函数

	1.2 事件监听:
		jQuery的写法
		1.首先，为f1绑定一个事件:
			f1.on('done', f2);
		2.对f1进行改写:
			f1.trigger('done'); 触发done事件

	1.3 发布/订阅:这就叫做发布/订阅模式,又称 观察者模式（observer pattern）。
		这个模式有多种实现:
			Ben Alman的Tiny Pub/Sub，这是jQuery的一个插件
				1.首先，f2向”信号中心”jQuery订阅”done”信号。
					jQuery.subscribe("done", f2);
				2.f1进行如下改写:
					f1执行完成后，向”信号中心”jQuery发布”done”信号，从而引发f2的执行。
					jQuery.publish("done");
				3.f2完成执行后，也可以取消订阅（unsubscribe）。
					jQuery.unsubscribe("done", f2);
		
2.异步操作的流程控制
	流程控制的问题：确定操作执行的顺序，以后如何保证遵守这种顺序。

	2.1 串行执行:采用事件驱动模式
		编写一个流程控制函数，让它来控制异步任务
			函数series就是串行函数，它会依次执行异步任务，所有任务都完成后，才会执行final函数。
			items数组保存每一个异步任务的参数，results数组保存每一个异步任务的运行结果。

	2.2 并行执行

	2.3 并行与串行的结合
			就是设置一个门槛，每次最多只能并行执行n个异步任务。这样就避免了过分占用系统资源。

3.Promise对象
	3.1 简介
		每一个异步任务立刻返回一个Promise对象
		then方法，允许指定回调函数，在异步任务完成后调用。
		(new Promise(f1)).then(f2);

	3.2 Promise接口:
		Promise对象使用then方法添加回调函数。then方法可以接受两个回调函数，第一个是异步操作成功时（变为resolved状态）时的回调函数，第二个是异步操作失败（变为rejected）时的回调函数（可以省略）。
		这两个函数都接受异步操作传回的值作为参数。

	3.3 Promise对象的生成

	3.4 用法辨析
		Promise的用法，简单说就是一句话:使用then方法添加回调函数。

4.Promise的应用
	4.1 加载图片

	4.2 Ajax操作

9.2 有限状态机
=====================
1.概述
	三个特征：
		状态总数（state）是有限的。
		任一时刻，只处在一种状态之中。
		某种条件下，会从一种状态转变（transition）到另一种状态。

		个对象的状态越多、发生的事件越多，就越适合采用有限状态机的写法。

2.Javascript Finite State Machine函数库
	有限状态机的函数库：
		https://github.com/jakesgordon/javascript-state-machine
	教程网址：
		http://javascript.ruanyifeng.com/advanced/fsm.html

9.3 MVC框架与Backbone.js
	1.MVC框架：
		（1）Model
			Model表示数据层，也就是程序需要的数据源，通常使用JSON格式表示。
		（2）View
			View表示表现层，也就是用户界面，对于网页来说，就是用户看到的网页HTML代码。
		（3）Controller
			Controller表示控制层，用来对原始数据（Model）进行加工，传送到View。
	2.零框架解决方案
		辅助功能库（Helper Libraries）

	3.Backbone的加载
		<script src="/javascripts/lib/jquery.js"></script>
		<script src="/javascripts/lib/underscore.js"></script> //一系列函数式编程的功能函数
		<script src="/javascripts/lib/backbone.js"></script>
		<script src="/javascripts/jst.js"></script>

		<script src="/javascripts/router.js"></script> //Ember.js使用的路由库
		<script src="/javascripts/init.js"></script>
	4.Backbone的用法

9.4 严格模式
	1.概述
		1.1 设计目的

		1.2 启用方法
		（1） 针对整个脚本文件
			字符串use strict出现在代码中间，则不起作用，即严格模式必须从代码一开始就生效。
			两个不同模式的脚本合并成一个文件，如果严格模式的脚本在前，则合并后的脚本都是”严格模式“；如果正常模式的脚本在前，则合并后的脚本都是”正常模式“。总之，这两种情况下，合并后的结果都是不正确的。因此，建议在多个脚本需要合并的场合，”严格模式“只在函数中打开，不针对整个脚本打开。
		（2）针对单个函数
			将“use strict”放在函数体的第一行，则整个函数以“严格模式”运行
		（3）脚本文件的变通写法
			在脚本文件第一行放置use strict不利于文件合并，所以更好的做法是，借用第二种方法，将整个脚本文件放在一个立即执行的匿名函数之中。
			(function () {
			  "use strict";
			  // some code here
			})();
	2.显式报错


//当有文件添加进来时执行，负责view的创建
	addFile()

		获取文件状态
			如果失败
			其他
		生成缩略图：
			缩略图
			进度信息
			旋转角度
		文件绑定状态改变事件

		$li绑定鼠标事件
			进入
			移出事件
		$bts绑定事件
			移出队列
			旋转事件




	removeFile

file 状态改变事件