第一步：初始化项目目录
	如下目录及文件夹，最终目录结构如下：
		- dist //文件生成目录
		    -- //自动生成
		- node_module //自动安装
		    -- ...
		- src //文件入口
		    -- components //组件存放
		        -- app.vue //主.vue
		    -- main.js //主.js
		- index.html //主.html
		- package.json //npm 配置
		- webpack.cofig.js // webpack配置


第二步：安装项目依赖
	创建package.json文件：
		可以直接使用npm init来初始化package.json文件配置。

		加载很多对应的loader：

		配置清单如下：
			在实际项目中，json文件中不能出现注释
			npm install xxx-loader --save-dev这样的命令

			{
			    "name": "05-five-vue", //项目名称
			    "version": "1.0.0", //版本
			    "description": "vue+webapck", //描述
			    "main": "index.js", //主文件
			    "scripts": {
			        "test": "echo \"Error: no test specified\" && exit 1",
			        "start": "webpack-dev-server --inline"
			    }, //scripts指定了运行脚本命令的npm命令行缩写，比如这是的start指定了运行npm run start时，所要执行的命令。
			    "dependencies": { //项目依赖
			        "vue": "^1.0.18"
			    },
			    "devDependencies": { //各种各样的loader，用来解析想相应的文件格式。要解析vue并且完成相应的功能，这些基本都是必须的。
			        "autoprefixer-loader": "^2.0.0",
			        "babel": "^6.3.13",
			        "babel-core": "^6.3.21",
			        "babel-loader": "^6.2.0",
			        "babel-plugin-transform-runtime": "^6.3.13",
			        "babel-preset-es2015": "^6.3.13",
			        "babel-runtime": "^5.8.34",
			        "css-loader": "^0.16.0",
			        "file-loader": "^0.8.5",
			        "html-loader": "^0.3.0",
			        "node-sass": "^3.4.2",
			        "sass-loader": "^3.2.0",
			        "style-loader": "^0.12.3",
			        "url-loader": "^0.5.6",
			        "vue-html-loader": "^1.2.0",
			        "vue-loader": "^7.2.0",
			        "webpack": "^1.12.0",
			        "webpack-dev-server": "^1.14.0"
			    },
			    "author": "guowenfh", //作者
			    "license": "MIT", //开源协议
			    "keywords": [ //关键字
			        "vue",
			        "webpack"
			    ]
			}

		简便：直接复制上面的devDependencies,dependencies字段，并且填写到你的package.json，运行npm install就会自动安装所有的模块以及依赖
第三步：配置webpack
	配置webpack.config.js,清单如下：
		var path = require('path');
		// NodeJS中的Path对象，用于处理目录的对象，提高开发效率。
		// 模块导入
		module.exports = {
		    // 入口文件地址，不需要写完，会自动查找
		    entry: './src/main',
		    // 输出
		    output: {
		        path: path.join(__dirname, './dist'),
		        // 文件地址，使用绝对路径形式
		        filename: '[name].js',
		        //[name]这里是webpack提供的根据路口文件自动生成的名字
		        publicPath: '/dist/'
		        // 公共文件生成的地址
		    },
		    // 服务器配置相关，自动刷新!
		    devServer: {
		        historyApiFallback: true,
		        hot: false,
		        inline: true,
		        grogress: true,
		    },
		    // 加载器
		    module: {
		        // 加载器
		        loaders: [
		        // 解析.vue文件
		            { test: /\.vue$/, loader: 'vue' },
		        // 转化ES6的语法
		            { test: /\.js$/, loader: 'babel', exclude: /node_modules/ },
		        // 编译css并自动添加css前缀
		            { test: /\.css$/, loader: 'style!css!autoprefixer'},
		        //.scss 文件想要编译，scss就需要这些东西！来编译处理
		        //install css-loader style-loader sass-loader node-sass --save-dev
		            { test: /\.scss$/, loader: 'style!css!sass?sourceMap'},
		        // 图片转化，小于8K自动转化为base64的编码
		            { test: /\.(png|jpg|gif)$/, loader: 'url-loader?limit=8192'},
		        //html模板编译？
		            { test: /\.(html|tpl)$/, loader: 'html-loader' },
		        ]
		    },
		    // .vue的配置。需要单独出来配置，其实没什么必要--因为我删了也没保错，不过这里就留这把，因为官网文档里是可以有单独的配置的。
		    vue: {
		        loaders: {
		            css: 'style!css!autoprefixer',
		        }
		    },
		    // 转化成es5的语法
		    babel: {
		        presets: ['es2015'],
		        plugins: ['transform-runtime']
		    },
		    resolve: {
		        // require时省略的扩展名，如：require('module') 不需要module.js
		        extensions: ['', '.js', '.vue'],
		        // 别名，可以直接使用别名来代表设定的路径以及其他
		        alias: {
		            filter: path.join(__dirname, './src/filters'),
		            components: path.join(__dirname, './src/components')
		        }
		    },
		    // 开启source-map，webpack有多种source-map，在官网文档可以查到
		    devtool: 'eval-source-map'
		};