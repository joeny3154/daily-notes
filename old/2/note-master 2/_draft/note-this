面向对象编程-this 


// this就是指属性或方法“ 当前” 所在的对象。

// 对象的属性可以赋给另一个对象， 所以属性所在的当前对象是可变的， 即this的指向是可变的。
function f() {
	return '姓名' + this.name;
}
var A = {
	name: "zhang san",
	describe: f
};
var B = {
	name = "li si",
	describe: f
};
B.describe();
A.describe();

//网页编程的例子
//<input type="text" name="age" size=3 onChange="validate(this, 18, 99);">
function validate(obj, lowval, hival) {
	if ((obj.val < lowval) || (obj.val > lowval)) {
		console.log('验证通过');
	}
}

//JavaScript语言之中，一切皆对象，运行环境也是对象，所以函数都是在某个对象之中运行，this就是这个对象（环境）。

/*二.使用场合*/

// 1.构造函数
// 构造函数中的this，指的是实例对象。

// 2.对象的方法

	// 注意：
	var a = {
		b: {
			m: function() {
				console.log(this.p)
			},
			p: 'hello'
		}
	};
	var hello = a.b.m();//hello
	var h = a.b;
	h.m();//hello
	var he = a.b.m;
	he();//undefined
// 3.Node
	//局环境中，this指向全局对象global；模块环境中，this指向module.exports。
	// 全局环境
	this === global // true
	// 模块环境
	this === module.exports // true

/*三.使用注意点*/
// 1.避免多层this
var o ={
	f1:function(){
		console.log(this);
		var f2=(function(){
			console.log(this);
		})();
	}
}
// 相当于
	var temp=function(){
		console.log(this);
	};
	var o2={
		f1:function(){
			console.log(this);
			var f2=temp();
		}
	}
	// 解决
	var o3={
		f1:function(){
			var that=this;
			console.log(this);
			var f2=(function(){
				console.log(that);
			})();
		}
	}

	//在严格模式下，如果函数内部的this指向顶层对象，就会报错。
	var counter = {
	  count: 0
	};
	counter.inc = function () {
	  'use strict';
	  this.count++
	};
	var f = counter.inc;
	f();// TypeError: Cannot read property 'count' of undefined
//2.避免数组处理方法中的this
	//数组的map和foreach方法，允许提供一个函数作为参数。这个函数内部不应该使用this。
	var o={
		v:'hello',
		p:['a1','a2'],
		f:function(){
			//that=this;//中间量
			this.p.forEach(function(item,index){
				console.log(this.v+":"+item);
			})
		}
	}
	o.f();
	//undefined: a1
	//undefined: a2
	//原因跟上一段的多层this是一样的，就是内层的this不指向外部，而指向顶层对象。

	//解决1：这个问题的一种方法，是使用中间变量。
		//that=this;//中间量
	//解决2：
		//将this当作foreach方法的第二个参数，固定它的运行环境。
		var o={
		v:'hello',
		p:['a1','a2'],
		f:function(){
			this.p.forEach(function(item,index){
				console.log(this.v+":"+item);
			},this)
		}
	}

// 3.避免回调函数中的this
	var o=new Object();
	o.f=function(){
		console.log(this===o);
	}
	$('#button').on('click', o.f);//false
	// 此时this不再指向o对象，而是指向按钮的DOM对象,f方法是在按钮对象的环境中被调用的

/*四.function.prototype.call()*/
	call、apply、bind这三个方法，来切换/固定this的指向。

	// 函数实例的call方法，可以指定该函数内部this的指向（即函数执行时所在的作用域），然后在所指定的作用域中，调用该函数。

	func.call(thisValue, arg1, arg2)//...
	// 第一个参数就是this所要指向的那个对象，如果call方法没有参数，或者参数为null或undefined，则等同于指向全局对象。后面的参数则是函数调用时所需的参数。

	// call的应用
		// 1.是调用对象的原生方法。

/*五.function.prototype.apply()*/
	func.apply(thisValue, [arg1, arg2])//...
	//第一个参数也是this所要指向的那个对象，为null或undefined，则等同于指定全局对象

	// 应用:
	// 1.找出数组最大元素
		var a = [10, 2, 4, 15, 9];
		Math.max.apply(null, a);
	// 2.将数组的空元素变为undefined
		Array.apply(null, ["a",,"b"]);
		// [ 'a', undefined, 'b' ]
		// 空元素与undefined的差别在于，数组的forEach方法会跳过空元素，但是不会跳过undefined。因此，遍历内部元素的时候，会得到不同的结果。
	// 3.转换类似数组的对象
		// 利用数组对象的slice方法，可以将一个类似数组的对象（比如arguments对象）转为真正的数组。
			Array.prototype.slice.apply({0:1,length:1})
			// [1]
			Array.prototype.slice.apply({0:1})
			// []
			Array.prototype.slice.apply({0:1,length:2})
			// [1, undefined]
			Array.prototype.slice.apply({length:1})
			// [undefined]
			这个方法起作用的前提是，被处理的对象必须有length属性，以及相对应的数字键。

		// 4.绑定回调函数的对象
			var o = new Object();
			o.f = function ()v {
			  console.log(this === o);
			}
			var f = function (){
			  o.f.apply(o); // 或者 o.f.call(o);
			};
			$('#button').on('click', f);

六.function.prototype.bind()
	bind方法用于将函数体内的this绑定到某个对象，然后 -----> 返回一个新函数
		var print = console.log;
		print(2)
		// TypeError: Illegal invocation
		var print=console.log.bind(console);//返回一个新函数
		print(2);//2
			bind方法将log方法内部的this绑定到console对象，这时就可以安全地将这个方法赋值给其他变量了

	demo:
		var couter={
			count:0,
			inc:function(){
				this.count++;			}
		};
		var fanc=counter.inc;
		fanc();
		counter.count;//0
		var fun=counter.inc.bind(counter);
		fun();
		counter.count;//1

	bind比call方法和apply方法更进一步的是，除了绑定this以外，还可以绑定原函数的参数:
		add.bind(obj, 5);

		如果bind方法的第一个参数是null或undefined，等于将this绑定到全局对象，函数运行时this指向顶层对象（在浏览器中为window）。

	自行定义bind方法://对于那些不支持bind方法的老式浏览器。
		if(!('bind' in Function.prototype)){
			Function.prototype.bind=function(){
				var fn=this;
				var context=arguments[0];
				var args=Array.prototype.slice.call(arguments, 1);//参数
				return function(){
					return fn.apply(context,args);
				}
			}
		}
	注意：
		1.bind方法每运行一次，就返回一个新函数，这会产生一些问题。比如，监听事件的时候，不能写成下面这样：
				element.addEventListener('click',o.m.bind(o));
			click事件绑定bind方法生成的一个匿名函数。这样会导致无法取消绑定，所以，下面的代码是无效的:
				element.removeEventListener("click",o.m.bind(o));
			正确的写法：
				var listener=o.m.bind(o);
				element.addEventListener('click',listener);
				element.removeEventListener('click',listener);
		2.结合回调函数使用
			将包含this的方法直接当作回调函数。
			var obj = {
			  name: '张三',
			  times: [1, 2, 3],
			  print: function () {
			    this.times.forEach((function (n) {
			      console.log(this.name);
			    }).bind(this));
			  }
			};
			obj.print()
		3.结合call方法使用
			[1,2,3].slice(0,1);
				等同于：
			Array.prototype.slice.call([1,2,3],0,1);

			call方法实质上是调用 Function.prototype.call方法;
				var slice=Function.prototype.call.bind(Array.prototype.slice);
				slice([1, 2, 3], 0, 1) // [1]

