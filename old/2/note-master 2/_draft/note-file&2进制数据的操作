1.Blob对象
2.FileList对象
3.File API
4.FileReader API
5.综合实例：显示用户选取的本地图片
6.综合实例：显示用户选取的本地图片

1.Blob对象
	Blob对象是一个代表二进制数据的基本对象，在它的基础上，又衍生出一系列相关的API，用来操作文件。
		File对象：负责处理那些以文件形式存在的二进制数据，也就是操作本地文件；
		FileList对象：File对象的网页表单接口；
		FileReader对象：负责将二进制数据读入内存内容；
		URL对象：用于对二进制数据生成URL。
	Blob（Binary Large Object）对象代表了一段二进制数据，提供了一系列操作接口。
	生成Blob对象有两种方法：一种是使用Blob构造函数，另一种是对现有的Blob对象使用slice方法切出一部分
	
	(1）Blob构造函数，接受两个参数。
		var htmlParts = ["<a id=\"a\"><b id=\"b\">hey!<\/b><\/a>"];
		var myBlob = new Blob(htmlParts, { "type" : "text\/xml" });

		demo:生成可下载文件的a

	(2)Blob对象的slice方法，将二进制数据按照字节分块，返回一个新的Blob对象。

		demo:大文件分割上传

	（3）Blob对象有两个只读属性：
		size：二进制数据的大小，单位为字节。
		type：二进制数据的MIME类型，全部为小写，如果类型未知，则该值为空字符串。

		在Ajax操作中，如果xhr.responseType设为blob，接收的就是二进制数据。

2.FileList对象
	FileList对象针对表单的file控件。当用户通过file控件选取文件后，这个控件的files属性值就是FileList对象。它在结构上类似于数组，包含用户选取的多个文件。

	当用户通过file控件选取文件后，这个控件的files属性值就是FileList对象。它在结构上类似于数组，包含用户选取的多个文件

	<input type="file" id="input" onchange="console.log(this.files.length)" multiple />
	var selected_file = document.getElementById('input').files[0];

	采用拖放方式，也可以得到FileList对象:
		var dropZone = document.getElementById('drop_zone');
		dropZone.addEventListener('drop', handleFileSelect, false);

		function handleFileSelect(e) {
		    e.stopPropagation();
		    e.preventDefault();

		    var files = e.dataTransfer.files; // FileList object.

		    // ...
		}
		handleFileSelect:是拖放事件的回调函数，
		e是一个事件对象:该参数的dataTransfer.files属性就是一个FileList对象，里面包含了拖放的文件

3.File API
	<input type="file" id="input" onchange="console.log(this.files.length)" multiple></input>
	File API提供File对象，它是FileList对象的成员;
	包含了文件的一些元信息，比如文件名、上次改动时间、文件大小和文件类型。
		var selected_file = document.getElementById('input').files[0];

		name：文件名，该属性只读。
		size：文件大小，单位为字节，该属性只读。
		type：文件的MIME类型，如果分辨不出类型，则为空字符串，该属性只读。
		lastModified：文件的上次修改时间，格式为时间戳。
		lastModifiedDate：文件的上次修改时间，格式为Date对象实例。

4.FileReader API
	FileReader API用于读取文件，即把文件内容读入内存。它的参数是File对象或Blob对象。
	不同类型的文件，FileReader提供不同的方法读取文件。
		readAsBinaryString(Blob|File)：返回二进制字符串，该字符串每个字节包含一个0到255之间的整数。
		readAsText(Blob|File, opt_encoding)：返回文本字符串。默认情况下，文本编码格式是’UTF-8’，可以通过可选的格式参数，指定其他编码格式的文本。
		readAsDataURL(Blob|File)：返回一个基于Base64编码的data-uri对象。
		readAsArrayBuffer(Blob|File)：返回一个ArrayBuffer对象。

	FileReader对象采用异步方式读取文件，可以为一系列事件指定回调函数:
		onabort方法：读取中断或调用reader.abort()方法时触发。
		onerror方法：读取出错时触发。
		onload方法：读取成功后触发。
		onloadend方法：读取完成后触发，不管是否成功。触发顺序排在 onload 或 onerror 后面。
		onloadstart方法：读取将要开始时触发。
		onprogress方法：读取过程中周期性触发。

5.综合实例：显示用户选取的本地图片
	假设有一个表单，用于用户选取图片。
	<input type="file" name="picture" accept="image/png, image/jpeg"/>
	一旦用户选中图片，将其显示在canvas的函数可以这样写：
	
	还可以在canvas上面定义拖放事件，允许用户直接拖放图片到上面。

	所有的拖放事件都有一个dataTransfer属性，它包含拖放过程涉及的二进制数据。

	还可以让canvas显示剪贴板中的图片。
6.URL对象
	URL对象用于生成指向File对象或Blob对象的URL。
		var objecturl =  window.URL.createObjectURL(blob);
	上面的代码会对二进制数据生成一个URL，类似于“blob:http%3A//test.com/666e6730-f45c-47c1-8012-ccc706f17191”。
	
	使URL失效:	
		window.URL.revokeObjectURL(objectURL);

	demo:
		网页插入图片：
			var img = document.createElement("img");
			img.src = window.URL.createObjectURL(files[0]);
			img.height = 60;
			img.onload = function(e) {
			    window.URL.revokeObjectURL(this.src);
			}
			body.appendChild(img);
			var info = document.createElement("span");
			info.innerHTML = files[i].name + ": " + files[i].size + " bytes";
			body.appendChild(info);
		本机视频预览：
			var video=document.getElementById("video");
			var obj_ur=window.url.createObjectURL(blob);
			video.src=obj_url;
			video.play();
			window.URL.revvowindow.URL.revokeObjectURL(obj_url);