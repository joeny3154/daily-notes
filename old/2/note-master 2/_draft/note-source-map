http://javascript.ruanyifeng.com/tool/sourcemap.html

http://www.cnblogs.com/w-wanglei/p/5701356.html

1.简介
	部分源码（尤其是各种函数库和框架）都要经过转换，才能投入生产环境。

	常见的源码转换，主要是以下三种情况：
		压缩，减小体积。
		多个文件合并，减少HTTP请求数。
		其他语言编译成JavaScript。最常见的例子就是CoffeeScript。

		这三种情况，都使得实际运行的代码不同于开发代码，除错（debug）变得困难重重。

		为什么有Source map：
			大部分源代码都需要经过编译、合并、压缩才能运用到实际环境中。为了减少网络资源占用，源码一般都会经过以下方式处理：
				使用css框架合并压缩css文件；
				使用js合并插件，减少网络请求次数；
				压缩js文件，降低网络占用；

	什么是Source map：
		Source map:
			Source map就是一个信息文件，里面储存着位置信息。也就是说，转换后的代码的每一个位置，所对应的转换前的位置

		相当于一个映射文件，它提供了转换后的代码，所对应源代码的位置。也就是说，在调试js过程中，我们可以清楚的看到当前执行代码对应于源代码的具体位置。

		支持的浏览器：目前对Source map支持最好的应该是Chrome浏览器：
			如何打开Chrome的Source map功能：
			    第一步，打开Developer Tools工具，选择菜单View -> Developer -> Developer Tools
			    第二步，选择右上角的Settings菜单
			    第三步，选择General页签，勾选Enable source maps。

2.生成和启用
	生成Source Map的最常用方法，是使用Google的Closure编译器。
		https://developers.google.com/closure/compiler/

	生成：
		生成命令的格式如下：
			java -jar compiler.jar \ 
		　　--js script.js \
		　　--create_source_map ./script-min.js.map \
		　　--source_map_format=V3 \
		　　--js_output_file script-min.js
		各个参数的意义如下
			js： 转换前的代码文件
			create_source_map： 生成的source map文件
			source_map_format：source map的版本，目前一律采用V3。
			js_output_file： 转换后的代码文件。

		介绍生成Source map的gulp插件：
			http://www.cnblogs.com/w-wanglei/p/5701356.html
			在文件的最后一行能看到下面的代码：
				/*# sourceMappingURL=index.css.map */
				有了这行代码，我们在使用chrome浏览器时就可以看到index.css对应的源代码所在位置。当然，在上线项目时，我们也可以移除改行代码。
	启用：
		在转换后的代码头部或尾部，加上一行
			//# sourceMappingURL=/path/to/file.js.map
		或者：
			/*# sourceMappingURL=/path/to/file.js.map */

3.格式

4.mappings属性